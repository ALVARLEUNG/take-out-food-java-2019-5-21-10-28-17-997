import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        List<Item> items = this.itemRepository.findAll();
        List<SalesPromotion> salesPromotions = this.salesPromotionRepository.findAll();
        List<Order> orders = new ArrayList<>();
        String orderList = "";


        // generate order form
        double sum = 0;
        for (String input : inputs) {
            String[] newInput = input.split(" x ");
            for (Item item : items) {
                if (item.getId().equals(newInput[0])) {
                    Order order = new Order();
                    order.setItem(item);
                    order.setNumber(Integer.parseInt(newInput[1]));
                    orders.add(order);
                    orderList += item.getName() + " x " + order.getNumber() + " = " + (int)(item.getPrice() * order.getNumber()) + "元\n";
                    sum += item.getPrice() * order.getNumber();
                }
            }
        }

        //select compute mode
        double[] count = new double[salesPromotions.size()];
        String[] computeMode = new String[salesPromotions.size()];
        for (int i = 0; i < salesPromotions.size(); i++) {
            switch (salesPromotions.get(i).getType()) {
                case "BUY_30_SAVE_6_YUAN":
                    if (sum < 30) {
                        count[i] = sum;
                        computeMode[i] = "";
                        break;
                    }
                    count[i] = sum - Math.floor(sum / 30) * 6;
                    computeMode[i] = "-----------------------------------\n" + "使用优惠:\n" + "满30减6元，省" + (int)(Math.ceil(count[i] / 30) * 6) + "元\n";
                    break;
                case "50%_DISCOUNT_ON_SPECIFIED_ITEMS":
                    String specialFood = "";
                    double discount = 0;
                    for (Order order : orders) {
                        for (String id : salesPromotions.get(i).getRelatedItems()) {
                            if (id.equals(order.getItem().getId())) {
                                specialFood += order.getItem().getName() + "，";
                                discount += order.getNumber() * order.getItem().getPrice() / 2;
                            }
                        }
                    }
                    count[i] = sum - discount;
                    if (count[i] == sum) {
                        computeMode[i] = "";
                    } else {
                        computeMode[i] = "-----------------------------------\n" +
                                "使用优惠:\n" +
                                "指定菜品半价(" + specialFood.substring(0, specialFood.length() - 1) + ")，省"+(int)discount+"元\n";
                    }
                    break;
                default:
                    break;
            }
        }

        //find the min count
        int index = 0;
        double minCount = count[0];
        for (int i = 0; i < count.length; i++) {
            if (count[i] < minCount) {
                minCount = count[i];
                index = i;
            }
        }

        String finalOrder = "============= 订餐明细 =============\n" +
                orderList + computeMode[index] +
                "-----------------------------------\n" +
                "总计：" + (int)minCount + "元\n" +
                "===================================";


        return finalOrder;
    }
}
